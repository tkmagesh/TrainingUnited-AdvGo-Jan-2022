Magesh Kuppan

Schedule
    Start       : 10:00 AM
    Tea Break   : 11:30 AM (15 mins)
    Lunch Break : 1:00 PM (45 mins)
    Tea Break   : 3:00 PM (15 mins)
    End         : 4:30 PM

Methodolgy:
    No powerpoints
    100% hands on driven
    
Github Repository:
    https://github.com/tkmagesh/TrainingUnited-AdvGo-Jan-2022

Noticable features of Go
    1. higher order functions
        functions as data
            a. can assign a function to a variable
            b. can pass a function as an argument
            c. can return a function as a return value

    2. interface
    3. goroutines
        Go is a language built for concurrency
            language features
                go, chan (data type), <- (chan operator), select, range,
                sync package

    4. error handling


Concurrency

Thread T = new System.Threading.Thread(fn);
T.Start();

Things that should NOT be assumed in concurrent programming
    1. Never assume the sequence of execution of the goroutines
    2. Never assume the time taken for a goroutine to complete its task

To detect race conditions
    go run -race demo-04.go 

        OR

    go build -race demo-04.go
    ./demo-04

Channels
    Channel read operation is a blocking operation
    Channel write operation can succeed only if a read operation on the channel is already initiated (conditions apply)

Worker
    Tasks to be exected in a batch (n at a time)

Runner
    Tasks to be executed in a given time

Pool
    Resource pool

gRPC
    RPC (Remote Procedure Call)
        .NET Remoting
        Java RMI

    P101,Pen,10,100,Stationary
    P102,Pencil,50,50,Stationary

    data = 55
    xml = data * 5
    json = data * 3

Communication Patterns
    Request & Request
    Client Streaming (multiple requests & one response)
    Server Streaming (one request & multiple responses)
    Bidirectional Streaming (multiple requests & multiple responses)

Tools 
    Installation
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

        (when the above is installed, executables are created in the gopath/bin folder. Make sure this path is set in environment variables)

    Windows
        Install the binaries from https://github.com/protocolbuffers/protobuf/releases/

    Mac
        brew install protoc-gen-go
        brew install protoc-gen-go-grpc
        
to generate proxy & stub
    protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto

Code generated:
    service.pb.go
        serialization & deserialization information for the messages

    service_grpc.pb.go
        proxy & stub for the gRPC service